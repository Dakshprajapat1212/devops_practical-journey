# Detailed Notes: Day-14 Configuration Management with Ansible (Puppet vs Ansible)

## 1. Why Configuration Management Matters  
- Manual scripts once handled OS upgrades, patches, and software installs on dozens of servers.  
- In cloud/microservices, you manage hundreds or thousands of instances with diverse OSes (Ubuntu, CentOS, Windows, AIX).  
- Shell scripts break easily (flavor differences, remote loops).  
- Configuration Management (CM) tools emerged to automate, enforce desired state, and scale reliably.

---

## 2. Core CM Concepts  
- **Desired State**: Declare “what” the system should look like, not “how” to do it.  
- **Idempotency**: Applying the same config repeatedly yields the same result—no unintended side-effects.  
- **Push vs Pull**:  
  - *Push* (Ansible): Controller sends changes to nodes.  
  - *Pull* (Puppet): Agents poll a central server for updates.  
- **Agentless vs Agent-based**:  
  - *Agentless* tools require no software on managed nodes (just SSH/WinRM).  
  - *Agent-based* tools install a daemon on each node.

---

## 3. Puppet Overview  
- **Model**: Pull, agent-based.  
- **Language**: Ruby DSL (declarative).  
- **Architecture**: Master server(s) + agents on each node.  
- **Strengths**:  
  - Mature reporting and compliance.  
  - Strong enforcement over time.  
  - High availability via multi-master.  
- **Drawbacks**:  
  - Complex setup (master + certificates + agents).  
  - Steeper learning curve.  
  - Less flexible dynamic inventory.

---

## 4. Ansible Overview  
- **Model**: Push, agentless.  
- **Language**: YAML playbooks.  
- **Transport**: SSH for Linux, WinRM for Windows.  
- **Inventory**:  
  - *Static*: INI or YAML.  
  - *Dynamic*: Auto-discover AWS, Azure, GCP instances.  
- **Modules**: Built-in tasks for packages, files, services, clouds, databases, etc.  
- **Strengths**:  
  - Zero agents to install.  
  - Simple YAML syntax.  
  - Dynamic inventory keeps pace with auto-scaled nodes.  
- **Drawbacks**:  
  - Performance can lag at very large scales (SSH overhead).  
  - Windows support improving but still not as seamless.

---

## 5. Puppet vs Ansible at a Glance

| Feature           | Puppet                             | Ansible                              |
|-------------------|------------------------------------|--------------------------------------|
| Architecture      | Pull (Master ← Agents)             | Push (Controller → Nodes)            |
| Agents            | Required on every node             | None—uses SSH/WinRM                  |
| Language          | Ruby DSL                           | YAML playbooks                       |
| Inventory         | Static, semi-dynamic via scripts   | Static + native dynamic plugins      |
| Setup Ease        | Complex (PKI, masters, agents)     | Simple (SSH keys, no agents)         |
| Idempotency       | Declarative resource model         | Modules provide idempotent tasks     |
| Scaling           | Excellent for large fleets         | Good; tune forks/strategy or use AWX |
| OS Support        | Linux, Windows agents              | Linux, Windows (via WinRM)           |
| Learning Curve    | Moderate to high                   | Gentle—YAML and extensive docs       |

---

## 6. Anatomy of an Ansible Project

1. **Inventory**  
   - `hosts.ini` or dynamic script/plugin  
   - Groups—for example, `[web]`, `[db]`, `[batch]`

2. **ansible.cfg**  
   - Connection settings, default forks, privilege escalation

3. **Playbooks** (`.yml`)  
   - Top-level `hosts`, `vars`, `tasks`, `handlers`, `roles`

4. **Roles**  
   - Directory structure: `tasks/`, `handlers/`, `templates/`, `files/`, `vars/`, `defaults/`

5. **Modules & Plugins**  
   - Built-in modules (e.g., `apt`, `yum`, `service`, `copy`, `template`)  
   - Lookup, callback, connection, and inventory plugins

---

## 7. Live Project Example: Web Server Deployment

### Inventory (`hosts.ini`)
```ini
[web]
web1.example.com
web2.example.com

[db]
db1.example.com
```

### Playbook (`webserver.yml`)
```yaml
- name: Configure Web Servers
  hosts: web
  become: true

  tasks:
    - name: Install Nginx
      apt:
        name: nginx
        state: latest
        update_cache: yes

    - name: Deploy website files
      copy:
        src: ./site/
        dest: /var/www/html/
        owner: www-data
        group: www-data
        mode: '0644'

    - name: Ensure Nginx is running
      service:
        name: nginx
        state: started
        enabled: yes
```

### Run the Playbook
```bash
ansible-playbook -i hosts.ini webserver.yml
```
- Idempotent: Re-running makes no further changes if Nginx is already installed and running.

---

## 8. Dynamic Inventory (AWS Example)
```ini
# ansible.cfg
[defaults]
inventory = inventory_aws.yml
```
```yaml
# inventory_aws.yml
plugin: aws_ec2
regions:
  - us-east-1
filters:
  tag:Role: web
keyed_groups:
  - key: tags.Env
    prefix: env_
```
- Auto-discovers EC2 instances tagged `Role=web`.
- No need to manually update hosts file when auto-scaling.

---

## 9. Best Practices & Tips
- Use **Roles** to encapsulate logical units (e.g., `nginx`, `firewall`, `app`).
- Store secrets in **Ansible Vault** (`ansible-vault encrypt`).
- Leverage **CI/CD** pipelines to lint (`ansible-lint`) and syntax-check (`ansible-playbook --syntax-check`).
- Test in **check mode** (`--check`) before applying.
- Use **verbose** output (`-vvv`) for debugging.
- Maintain a **versioned Git repo** of playbooks/roles.

---

## 10. Common Pitfalls
- Forgetting `become: true` when privileged ops are needed.
- Hard-coding IPs or paths instead of using variables.
- Running imperative loops instead of leveraging modules’ idempotency.
- Failing to test playbooks against multiple OS flavors.
- Overlooking WinRM configuration for Windows hosts.

---

## 11. Q&A Highlights from Video
- **Why Ansible over Puppet?**  
  - Agentless push model, dynamic inventory, simpler YAML manifests, cross-platform support.  
- **How does dynamic inventory work?**  
  - Uses cloud provider APIs to list instances and group them automatically.  
- **Is Windows support ready?**  
  - Yes via WinRM and `win_*` modules, but setup is more verbose than Linux/SSH.  
- **Performance at scale?**  
  - Tune forks, use strategy plugins (`free`, `host_pinned`), or adopt AWX/Tower for centralized management.

---

*End of Day-14 detailed notes.*
