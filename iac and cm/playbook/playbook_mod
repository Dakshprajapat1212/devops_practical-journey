# Core Ansible Modules Commonly Used in DevOps

Below is a categorized, near-comprehensive list of the Ansible modules you’ll reach for again and again when automating DevOps workflows.  

---

## 1. Package Management  
- **apt**: Install, remove or update .deb packages on Debian/Ubuntu.  
- **yum**: Manage RPM packages on CentOS/RedHat.  
- **dnf**: Fedora’s next-gen package manager.  
- **pip**: Install Python packages from PyPI.  
- **npm**: Install Node.js packages.  
- **gem**: Manage Ruby gems.  

---

## 2. Service & Process Control  
- **service**: Start, stop, restart SysV services.  
- **systemd**: Same as `service` but for systemd-based distros (e.g., `systemctl`).  
- **supervisorctl**: Control processes managed by Supervisor.  

---

## 3. File, Directory & Template Management  
- **copy**: Copy a file from controller to target.  
- **template**: Jinja2-rendered files from controller to target.  
- **file**: Set permissions, ownership, symlinks.  
- **lineinfile**: Ensure a particular line is in a file.  
- **blockinfile**: Manage multi-line text blocks.  
- **replace**: Regex-based search/replace.  
- **synchronize**: Wrapper around rsync.  
- **unarchive**: Unpack .tar/.zip archives.  

---

## 4. Command & Shell Execution  
- **command**: Run a command (no shell features).  
- **shell**: Run via `/bin/sh` (supports pipes, redirects).  
- **raw**: Run a command without any module dependencies (good for bootstrapping).  

---

## 5. User, Group & SSH Key Management  
- **user**: Create, modify, remove user accounts.  
- **group**: Manage Unix groups.  
- **authorized_key**: Add or remove SSH public keys.  
- **ssh_key**: Generate SSH key pairs.  

---

## 6. Version Control & SCM  
- **git**: Clone, fetch or pull Git repositories.  
- **svn**: Checkout or update Subversion repositories.  
- **hg**: Mercurial repo operations.  

---

## 7. Networking & HTTP APIs  
- **uri**: Interact with HTTP/REST APIs (GET, POST, etc.).  
- **get_url**: Download files via HTTP/FTP.  
- **uri_facts**: Gather headers and status codes.  

---

## 8. Cloud & Infrastructure Provisioning  
- **ec2**: Launch, terminate AWS EC2 instances.  
- **cloudformation**: Deploy AWS CloudFormation stacks.  
- **azure_rm**: Manage Azure resources.  
- **gcp_compute**: Create/delete GCP VMs.  
- **openstack**: Interact with OpenStack services.  

---

## 9. Container & Orchestration  
- **docker_image**: Build or pull Docker images.  
- **docker_container**: Run, stop, remove Docker containers.  
- **k8s** / **k8s_facts**: Deploy to and gather info from Kubernetes.  
- **podman_container**: Manage Podman containers.  

---

## 10. Database Management  
- **mysql_db**, **mysql_user**: Create databases and users in MySQL/MariaDB.  
- **postgresql_db**, **postgresql_user**: PostgreSQL equivalents.  
- **mongodb_user**, **mongodb_replicaset**: MongoDB control.  

---

## 11. Monitoring & Notifications  
- **nagios** / **icinga2**: Update service checks.  
- **slack**: Send messages to Slack.  
- **mail**: Send email alerts.  
- **pagerduty**: Trigger PagerDuty incidents.  

---

## 12. Utility & Control Flow  
- **debug**: Print variables or messages.  
- **assert**: Fail a play if a condition isn’t met.  
- **pause**: Stop execution for a prompt or time.  
- **wait_for**: Wait for a port, file, or condition.  
- **include_role** / **import_role**: Bring in reusable roles.  
- **block**: Group tasks and apply common error handling.  
- **meta**: Control playbook lifecycle (e.g., `flush_handlers`, `end_play`).  

---

## 13. Packaging & Release  
- **rpm_key**: Manage RPM signing keys.  
- **npm_key**: Manage npm authentication.  
- **archive**: Create tar/zip archives on target.  

---

# Bringing It All Together

You don’t need every one of these modules in every playbook. In a typical DevOps pipeline, you might:

1. Provision infrastructure with `ec2` or Terraform (outside Ansible).  
2. Configure OS with `apt`/`yum`, `user`, `group`.  
3. Deploy apps via `git`, `copy`, `template`.  
4. Install dependencies with `pip` or `npm`.  
5. Manage services via `systemd` / `service`.  
6. Boot containers with `docker_container`.  
7. Configure Kubernetes via `k8s`.  
8. Hook into monitoring with `uri`, `slack`, `mail`.  

Each of these modules encapsulates a slice of system knowledge—no shell-embedding required. Mix and match them to automate your entire build-deploy-monitor cycle.  

Want more?  
- Dive into the [Ansible module index](https://docs.ansible.com/ansible/latest/collections/ansible/builtin/index.html).  
- Explore community-contributed modules on [Ansible Galaxy](https://galaxy.ansible.com/).  
- Start crafting **roles** to group related tasks, variables, templates, and handlers into reusable units.  

With this “toolbox” of modules at your fingertips, you can confidently automate almost anything your DevOps workflow demands.
