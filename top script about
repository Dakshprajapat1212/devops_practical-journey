Got it, Hannu â€” letâ€™s break this top output into plain, no-confusion parts so you know exactly what each number means.

â¸»

1. First line â€” System uptime & load

top - 15:13:30 up 48 min,  5 users,  load average: 0.00, 0.00, 0.00

	â€¢	15:13:30 â†’ Current system time.
	â€¢	up 48 min â†’ System has been running for 48 minutes since last boot.
	â€¢	5 users â†’ Number of users currently logged in (includes SSH sessions, terminals, etc.).
	â€¢	load average: 0.00, 0.00, 0.00 â†’ CPU load over:
	â€¢	Last 1 minute â†’ 0.00
	â€¢	Last 5 minutes â†’ 0.00
	â€¢	Last 15 minutes â†’ 0.00
(0.00 means CPU was completely idle. A load of 1.00 means 100% busy on a single-core CPU.)

â¸»

2. Second line â€” Task summary

Tasks: 118 total,   1 running, 117 sleeping,   0 stopped,   0 zombie

	â€¢	118 total â†’ Total number of processes.
	â€¢	1 running â†’ Processes actively using CPU.
	â€¢	117 sleeping â†’ Processes waiting/idling until needed.
	â€¢	0 stopped â†’ Processes paused/stopped (e.g., via SIGSTOP).
	â€¢	0 zombie â†’ Processes that finished but havenâ€™t been fully cleaned up (good: none here).

â¸»

3. Third line â€” CPU usage

%Cpu(s):  0.0 us,  0.3 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st

Breakdown of CPU time in the last refresh cycle:
	â€¢	us = 0.0 â†’ % in user space (normal programs).
	â€¢	sy = 0.3 â†’ % in system/kernel space.
	â€¢	ni = 0.0 â†’ % in user space with nice priority (background low-priority jobs).
	â€¢	id = 99.7 â†’ % idle time (CPU not doing anything).
	â€¢	wa = 0.0 â†’ % waiting for I/O (e.g., slow disk/network).
	â€¢	hi = 0.0 â†’ % servicing hardware interrupts.
	â€¢	si = 0.0 â†’ % servicing software interrupts.
	â€¢	st = 0.0 â†’ % stolen by hypervisor (VM host using CPU time).

â¸»

4. Fourth line â€” Memory usage

MiB Mem :    957.4 total,    326.4 free,    357.4 used,    430.3 buff/cache

	â€¢	957.4 total â†’ Total system RAM.
	â€¢	326.4 free â†’ Completely unused memory.
	â€¢	357.4 used â†’ Memory in active use by programs.
	â€¢	430.3 buff/cache â†’ Memory used for disk cache/buffers (can be freed if apps need it).

â¸»

5. Fifth line â€” Swap usage

MiB Swap:      0.0 total,      0.0 free,      0.0 used.    599.9 avail Mem

	â€¢	0.0 total â†’ No swap space configured.
	â€¢	0.0 used â†’ Swap not being used.
	â€¢	599.9 avail Mem â†’ Amount of RAM available for starting new applications without swapping.

â¸»

ðŸ’¡ Key takeaway for your numbers:
	â€¢	Your CPU is almost fully idle (99.7% idle).
	â€¢	Memory usage is light â€” more than 300 MiB truly free and ~430 MiB in cache.
	â€¢	No swap is set up, but plenty of RAM is available.
	â€¢	System load is basically zero â€” machine is very free.

â¸»

That line in top is the column header â€” it tells you what each column below means.
Letâ€™s break it down:

Column	Meaning
PID	Process ID â€” unique number given to each running process.
USER	Username of the process owner.
PR	Priority â€” how important the process is to the scheduler (lower number = higher priority).
NI	Nice value â€” a user-adjustable priority hint (-20 = highest priority, 19 = lowest).
VIRT	Virtual memory used by the process (includes all code, data, and shared libraries, whether in RAM or swap).
RES	Resident memory â€” the part of VIRT actually in physical RAM.
SHR	Shared memory â€” amount of RES that can be shared with other processes (e.g., shared libraries).
S	State of the process:

	â€¢	R = running
	â€¢	S = sleeping (idle but waiting for something)
	â€¢	I = idle kernel thread
	â€¢	D = uninterruptible sleep
	â€¢	Z = zombie (dead but not cleaned up) |
| %CPU | Percentage of CPU time the process is using right now. |
| %MEM | Percentage of physical RAM the process is using. |
| TIME+ | Total CPU time the process has used since it started (minutes:seconds.tenths). |
| COMMAND | Name (or command) that started the process. |

â¸»

ðŸ’¡ In your example:

1557 ubuntu  20  0  12328  5588  3540 S  0.0  0.6  0:01.28 top

	â€¢	PID: 1557 â†’ process ID of top
	â€¢	USER: ubuntu â†’ youâ€™re the owner
	â€¢	PR: 20 â†’ normal priority
	â€¢	NI: 0 â†’ nice value not changed
	â€¢	VIRT: 12328 KB â†’ virtual memory size
	â€¢	RES: 5588 KB â†’ RAM in use
	â€¢	SHR: 3540 KB â†’ shared memory
	â€¢	S: S â†’ sleeping (refreshing every 3 seconds)
	â€¢	%CPU: 0.0 â†’ not currently using CPU
	â€¢	%MEM: 0.6 â†’ using 0.6% of RAM
	â€¢	TIME+: 0:01.28 â†’ total CPU time used
	â€¢	COMMAND: top â†’ program name

â¸»

If you want, I can also give you a visual map of how VIRT, RES, and SHR relate in memory â€” thatâ€™s the part most beginners find tricky.

If you want, I can also make a color-coded diagram of top output so you can instantly know what each section means when you see it in real-time. That would make it stick forever.
